openapi: 3.0.0
info:
  title: asembl-v3
  version: '3.0'
  description: ''
servers:
  - url: 'https://appstage.asemblco.com/api/v3'
    description: stage
paths:
  '/user/{id}/categories':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: User categories
      operationId: put-user-id-categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        description:
                          type: string
                        priority:
                          type: number
                        main_image_path:
                          type: string
                          description: image relative path
                        thumb_image_path:
                          type: string
                          description: thumb relative path
                        sub_category_list:
                          type:
                            - string
                            - array
                          items:
                            type: object
                            properties:
                              id:
                                type: number
                              name:
                                type: string
                              description:
                                type: string
                              priority:
                                type: number
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
          required: true
          description: Logged user access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: |
                Categories
              properties:
                categories:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                        description: parent category id
                      sub_category_list:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: number
                              description: child category id
                          required:
                            - id
                    required:
                      - id
              required:
                - categories
            examples:
              example-1: {}
        description: ''
      description: ''
  '/event/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Event details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  descriptions:
                    type: string
                  entry_fee:
                    type: string
                  event_url:
                    type: string
                  image:
                    type: string
                    description: Absolute path of main image
                  dates:
                    type: object
                    properties:
                      calendar_date:
                        type: string
                        description: Date in format yyyy-mm-dd
                        format: date
                      start_date:
                        type: string
                        description: 'date time format yyyy-mm-dd HH:mm:ss'
                        format: date-time
                      finish_date:
                        type: string
                        description: 'date time format yyyy-mm-dd HH:mm:ss'
                        format: date-time
                  address:
                    type: object
                    properties:
                      street_address:
                        type: string
                      city:
                        type: string
                      state:
                        type: string
                      post_code:
                        type: string
                      lat:
                        type: string
                      lng:
                        type: string
                  owner:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      thumb_image_path:
                        type: string
                        description: Absolute path
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        parent_id:
                          type: integer
                        name:
                          type: string
                  event_attending_status:
                    type: string
                    description: Only returnet if user is logged
      operationId: get-events-id
      description: Return events details
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
          description: Logged user token
    put:
      summary: Event update
      operationId: put-event-id
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      event:
                        type: object
      description: Edit event
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventData'
        description: ''
  '/event/{id}/guest':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Event guests
      tags: []
      responses: {}
      operationId: get-event-id-guest
      description: Return five guests with name and thumb and a total event guests count.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                total_guests:
                  type: string
                users_guests:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      thumb_image_path:
                        type: string
  /event:
    post:
      summary: Event store
      operationId: post-event
      responses:
        '200':
          description: OK
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      event:
                        type: object
      description: Add new event
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eventData'
  '/user/{id}/event/{type}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
          enum:
            - going
            - went
        name: type
        in: path
        required: true
    get:
      summary: User events
      tags: []
      responses: {}
      operationId: get-user-id-event-type
      parameters:
        - schema:
            type: string
          in: header
          name: AcessToken
          required: true
      description: "Return paginated user's going or went events"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean
                message:
                  type: string
                data:
                  type: object
                  properties:
                    events:
                      type: object
                      properties:
                        total:
                          type: integer
                        per_page:
                          type: integer
                        current_page:
                          type: integer
                        last_page:
                          type: integer
                        next_page_url:
                          type: string
                        prev_page_url:
                          type: string
                        from:
                          type: integer
                        to:
                          type: integer
                        data:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              title:
                                type: string
                              starting_utc_date_time:
                                type: string
                              image:
                                type: string
            examples:
              Sucess example:
                value:
                  status: true
                  message: User events
                  data:
                    events:
                      total: 500
                      per_page: 20
                      current_page: 2
                      last_page: 25
                      next_page_url: 'http://localhost/api/v3/user/129/event/went?page=3'
                      prev_page_url: 'http://localhost/api/v3/user/129/event/went?page=1'
                      from: 21
                      to: 40
                      data:
                        - id: 7157
                          title: Laurin Talese
                          starting_utc_date_time: '2020-02-20 00:00:00'
                          image: /files/event_images/t_716520200121074423.jpg
                        - id: 7224
                          title: Global Connection Night February 2020
                          starting_utc_date_time: '2020-02-20 02:00:00'
                          image: /files/event_images/t_181520200125123959.jpg
        description: Paginated result
  '/event/{id}/category':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Event update categories
      operationId: put-event-id-category
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type:
                      - string
                      - object
                    properties:
                      categories:
                        type: string
      description: "Update an event categories. \nThe old categories will be removed and only the sended in this request will be used."
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: '#/components/schemas/categoryData'
              required:
                - categories
            examples:
              Default request:
                value:
                  categories:
                    - id: 1
                      children:
                        - 12
                        - 13
                        - 14
        description: ''
  /user:
    post:
      summary: User signup
      operationId: post-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        type: object
      description: User signup with email and facebook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: ''
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                dob:
                  type: string
                  description: Date of birth
                  example: '1985-08-20'
                descriptions:
                  type: string
                account_type:
                  type: string
                  enum:
                    - personal
                gender:
                  type: string
                  enum:
                    - f
                    - m
                    - nb
                password:
                  type: string
                  minLength: 6
                  maxLength: 30
                  description: "If is a facebook user this field isn't required"
                password_confirmation:
                  type: string
                  minLength: 6
                  maxLength: 30
                fb_id:
                  type: string
                profile_images:
                  type: array
                  description: Image only
                  items:
                    type: string
                cover_images:
                  type: array
                  description: Images only
                  items:
                    type: string
              required:
                - categories
                - first_name
                - last_name
                - email
                - dob
                - account_type
                - gender
                - password
                - password_confirmation
  '/user/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: User update
      operationId: put-user-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/returnSucess'
      description: Edit user profile
      parameters:
        - schema:
            type: string
          in: header
          name: AcessToken
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: '#/components/schemas/categoryData'
                first_name:
                  type: string
                last_name:
                  type: string
                dob:
                  type: string
                descriptions:
                  type: string
                account_type:
                  type: string
                  enum:
                    - personal
                    - business
                gender:
                  type: string
                  enum:
                    - m
                    - f
                    - nb
                password:
                  type: string
                  minLength: 6
                  maxLength: 30
                  description: ''
                password_confirmation:
                  type: string
                  minLength: 6
                  maxLength: 30
              required:
                - first_name
                - last_name
                - dob
                - account_type
                - gender
    get:
      summary: User details
      operationId: get-user-id
      responses:
        '200':
          description: OK
      description: User details
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
          required: true
  '/user/{id}/image/{type}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
      - schema:
          type: string
          enum:
            - profile
            - cover
        name: type
        in: path
        required: true
    put:
      summary: User image
      operationId: put-user-id-image
      responses:
        '200':
          description: OK
      description: |-
        Update and delete user images.
        The image order is the same of images array.
      parameters:
        - schema:
            type: string
          in: header
          name: AccessToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  description: All user images. Accespts image or id.
                  items:
                    type:
                      - string
                      - integer
                delete:
                  type: array
                  items:
                    type: integer
              required:
                - images
  '/user/{id}/friend':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: User friends
      tags: []
      responses: {}
      operationId: get-user-id-friend
      description: "Return a user's friend list"
      parameters:
        - schema:
            type: string
          in: query
          name: q
          description: Keyword
  '/event/{type}':
    parameters:
      - schema:
          type: string
          enum:
            - online
            - presential
        name: type
        in: path
        required: true
    get:
      summary: Event by type
      tags: []
      responses: {}
      operationId: get-event-type
      description: Return a paginated list with events by type
      parameters:
        - schema:
            type: string
            enum:
              - all
              - today
              - week
          in: query
          name: event_display
        - schema:
            type: number
            enum:
              - 0
              - 1
              - 2
          in: query
          name: whose_going
        - schema:
            type: number
          in: query
          name: page
components:
  schemas:
    categories:
      title: categories
      type: object
      properties:
        id:
          type: string
          description: parent id
        children:
          type: array
          description: "children's id array"
          items:
            type: integer
    Error:
      title: Error
      type: object
      properties:
        status:
          type: boolean
        error:
          type:
            - string
            - array
          items: {}
      description: Default error
    eventData:
      title: eventData
      type: object
      description: Event data
      properties:
        categories:
          type: array
          description: Not required in PUT method
          items:
            type: object
            properties:
              id:
                type: string
                description: parent id
              children:
                type: array
                description: children id
                items:
                  type: integer
            required:
              - id
        image:
          type: string
          description: Image as file type. If null was invited the previous is deleted.
        title:
          type: string
          maxLength: 250
          minLength: 3
        address:
          type: string
          minLength: 3
          maxLength: 250
        city:
          type: string
          minLength: 3
          maxLength: 250
        state:
          type: string
          minLength: 1
          maxLength: 250
        lat:
          type: string
          minLength: 4
          maxLength: 250
        lng:
          type: string
          minLength: 4
          maxLength: 250
        post_code:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          minLength: 3
        entry_fee:
          type: number
        event_url:
          type: string
          description: 'with protocol (http:// or https://)'
        starting_utc_date_time:
          type: string
          example: '2020-05-18 12:45:56'
        end_utc_date_time:
          type: string
          example: '2020-05-18 12:45:56'
        age_group:
          type: string
          example: 0-100
          minLength: 3
        genders:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: string
            enum:
              - m
              - f
              - nb
        invitation_to:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        groups:
          type: array
          description: selected groups id
          items:
            type: integer
        contacts:
          type: array
          description: selected friends id
          items:
            type: integer
        event_type:
          type: integer
          enum:
            - 1
            - 2
        is_shareable:
          type: boolean
        guests:
          type: number
        venue_name:
          type: string
        gender:
          type: string
          enum:
            - m
            - f
            - nb
      required:
        - title
        - address
        - lat
        - lng
        - starting_utc_date_time
        - age_group
        - genders
        - invitation_to
        - event_type
    categoryData:
      title: categoryData
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            description: The parent category id
          children:
            type: array
            description: Onlyt the children categories ID
            items:
              type: integer
        required:
          - id
    returnSucess:
      title: returnSucess
      type: object
      properties:
        status:
          type: boolean
        message:
          type: string
        data:
          type: object
  securitySchemes: {}
